// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DStoreServiceClient is the client API for DStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DStoreServiceClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
}

type dStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDStoreServiceClient(cc grpc.ClientConnInterface) DStoreServiceClient {
	return &dStoreServiceClient{cc}
}

func (c *dStoreServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/dstore.DStoreService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dStoreServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/dstore.DStoreService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DStoreServiceServer is the server API for DStoreService service.
// All implementations should embed UnimplementedDStoreServiceServer
// for forward compatibility
type DStoreServiceServer interface {
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
}

// UnimplementedDStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDStoreServiceServer struct {
}

func (UnimplementedDStoreServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedDStoreServiceServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}

// UnsafeDStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DStoreServiceServer will
// result in compilation errors.
type UnsafeDStoreServiceServer interface {
	mustEmbedUnimplementedDStoreServiceServer()
}

func RegisterDStoreServiceServer(s grpc.ServiceRegistrar, srv DStoreServiceServer) {
	s.RegisterService(&_DStoreService_serviceDesc, srv)
}

func _DStoreService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DStoreServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dstore.DStoreService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DStoreServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DStoreService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DStoreServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dstore.DStoreService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DStoreServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dstore.DStoreService",
	HandlerType: (*DStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _DStoreService_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _DStoreService_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dstore.proto",
}
